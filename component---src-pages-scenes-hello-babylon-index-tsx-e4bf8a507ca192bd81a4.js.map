{"version":3,"sources":["webpack:///./src/pages/scenes/hello-babylon/index.tsx","webpack:///./src/components/Layout/index.tsx","webpack:///./src/components/BabylonCanvas/index.tsx"],"names":["__webpack_exports__","default","react__WEBPACK_IMPORTED_MODULE_0__","createElement","_components__WEBPACK_IMPORTED_MODULE_2__","b","a","init","engine","scene","canvas","camera","babylonjs__WEBPACK_IMPORTED_MODULE_1__","FreeCamera","Vector3","setTarget","Zero","attachControl","HemisphericLight","intensity","Mesh","CreateSphere","position","y","CreateGround","runRenderLoop","render","_ref","children","Fragment","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","BabylonCanvas_BabylonCanvas","n","react","createRef","state","width","height","onResize","_this","setCanvasSize","this","setState","props","window","innerWidth","innerHeight","componentDidUpdate","prevProps","resize","componentDidMount","_this$props","engineOptions","adaptToDeviceRatio","current","babylon","Engine","Scene","addEventListener","componentWillUnmount","removeEventListener","className","_this$state","ref","Component","c","t","d","o"],"mappings":"8HA2BAA,EAAAC,QApByB,kBAAMC,EAAAC,cAACC,EAAAC,EAAD,KAC3BH,EAAAC,cAACC,EAAAE,GAAcC,KAAM,SAACC,EAAQC,EAAOC,GAE7B,IAAMC,EAAS,IAAIC,EAAAC,WAAmB,SAAU,IAAID,EAAAE,QAAgB,EAAG,GAAI,IAAKL,GAChFE,EAAOI,UAAUH,EAAAE,QAAgBE,QACjCL,EAAOM,cAAcP,MAGP,IAAIE,EAAAM,iBAAyB,QAAS,IAAIN,EAAAE,QAAgB,EAAG,EAAG,GAAIL,GAC5EU,UAAY,GAGHP,EAAAQ,KAAaC,aAAa,SAAU,GAAI,EAAGZ,GACnDa,SAASC,EAAI,EAERX,EAAAQ,KAAaI,aAAa,SAAU,EAAG,EAAG,EAAGf,GAC7DD,EAAOiB,cAAc,kBAAMhB,EAAMiB,sFCXzC1B,EAAAM,EAP0B,SAAAqB,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OAAkB1B,EAAAC,cAAAD,EAAA2B,SAAA,KACxC3B,EAAAC,cAAC2B,EAAAxB,EAAD,KACIJ,EAAAC,cAAA,kCAEFyB,iGCSeG,sJACTtB,MAAsB,KAAAuB,EACtBxB,OAAwB,KAAAwB,EACxBtB,OAA6CuB,EAAAC,YAAAF,EACrDG,OAA8BC,MAAO,EAAGC,OAAQ,GAAAL,EAOxCM,SAAW,kBAAMC,EAAKC,uDANtBA,yBACJC,KAAKC,UACDN,MAAOK,KAAKE,MAAMP,OAASQ,OAAOC,WAClCR,OAAQI,KAAKE,MAAMN,QAAUO,OAAOE,iBAI5CC,4BAAmBC,GACVA,EAAUZ,QAAUK,KAAKE,MAAMP,OAAWY,EAAUX,SAAWI,KAAKE,MAAMN,QAASI,KAAKD,gBAC7FC,KAAKjC,QAAUiC,KAAKjC,OAAOyC,YAE/BC,6BAAoB,IAAAC,EAKZV,KAAKE,MAHLpC,EAFY4C,EAEZ5C,KACA6C,EAHYD,EAGZC,cACAC,EAJYF,EAIZE,mBAEE3C,EAAS+B,KAAK/B,OAAO4C,QAC3Bb,KAAKjC,OAAS,IAAI+C,EAAAC,OAAO9C,KAAc0C,EAAeC,GACtDZ,KAAKhC,MAAQ,IAAI8C,EAAAE,MAAMhB,KAAKjC,QAC5BD,GAAQA,EAAKkC,KAAKjC,OAAQiC,KAAKhC,MAAOC,GACtC+B,KAAKD,gBACLI,OAAOc,iBAAiB,SAAUjB,KAAKH,aAE3CqB,gCACIf,OAAOgB,oBAAoB,SAAUnB,KAAKH,aAE9CZ,kBAAS,IAEDmC,EACApB,KAAKE,MADLkB,UAFCC,EAODrB,KAAKN,MAFLC,EALC0B,EAKD1B,MACAC,EANCyB,EAMDzB,OAEJ,OAAOJ,EAAA9B,cAAA,UACH0D,UAAWA,EACXzB,MAAOA,EACPC,OAAQA,EACR0B,IAAKtB,KAAK/B,YA5CDqB,CAAsBE,EAAA+B,WAAAC,EAAAC,EAAA,KAAAA,EAAAC,EAAAnC,EAAA,sBAAAoC,IAAAF,EAAAC,EAAAnC,EAAA,sBAAAiC,EAAA3D","file":"component---src-pages-scenes-hello-babylon-index-tsx-e4bf8a507ca192bd81a4.js","sourcesContent":["import * as React from 'react';\r\nimport * as BABYLON from 'babylonjs';\r\nimport {\r\n    Layout,\r\n    BabylonCanvas,\r\n} from '../../../components';\r\n\r\nconst HelloBabylonPage = () => <Layout>\r\n    <BabylonCanvas init={(engine, scene, canvas) => {\r\n        { // camera\r\n            const camera = new BABYLON.FreeCamera('camera', new BABYLON.Vector3(0, 5, -10), scene);\r\n            camera.setTarget(BABYLON.Vector3.Zero());\r\n            camera.attachControl(canvas, true);\r\n        }\r\n        { // light\r\n            const light = new BABYLON.HemisphericLight('light', new BABYLON.Vector3(0, 1, 0), scene);\r\n            light.intensity = 0.7;\r\n        }\r\n        { // sphere\r\n            const sphere = BABYLON.Mesh.CreateSphere('sphere', 16, 2, scene);\r\n            sphere.position.y = 1;\r\n        }\r\n        const _ground = BABYLON.Mesh.CreateGround('ground', 6, 6, 2, scene);\r\n        engine.runRenderLoop(() => scene.render());\r\n    }}/>\r\n</Layout>;\r\n\r\nexport default HelloBabylonPage;\r\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\n\nimport './index.module.scss';\n\nconst Layout: React.SFC = ({ children }) => <>\n    <Helmet>\n        <title>babylon-practice</title>\n    </Helmet>\n    { children }\n</>;\n\nexport default Layout;\n","import * as React from 'react';\r\nimport {\r\n    Engine,\r\n    Scene,\r\n} from 'babylonjs';\r\n\r\ninterface BabylonCanvasProps {\r\n    className?: string;\r\n    init: (engine: Engine, scene: Scene, canvas: HTMLCanvasElement) => void;\r\n    engineOptions?: BABYLON.EngineOptions;\r\n    adaptToDeviceRatio?: boolean;\r\n    width?: number;\r\n    height?: number;\r\n}\r\ninterface BabylonCanvasState {\r\n    width: number;\r\n    height: number;\r\n}\r\nexport default class BabylonCanvas extends React.Component<BabylonCanvasProps, BabylonCanvasState> {\r\n    private scene: Scene | null = null;\r\n    private engine: Engine | null = null;\r\n    private canvas: React.RefObject<HTMLCanvasElement> = React.createRef();\r\n    state: BabylonCanvasState = { width: 0, height: 0 };\r\n    private setCanvasSize() {\r\n        this.setState({\r\n            width: this.props.width || window.innerWidth,\r\n            height: this.props.height || window.innerHeight,\r\n        });\r\n    }\r\n    private onResize = () => this.setCanvasSize();\r\n    componentDidUpdate(prevProps: BabylonCanvasProps) {\r\n        if ((prevProps.width !== this.props.width) || (prevProps.height !== this.props.height)) this.setCanvasSize();\r\n        this.engine && this.engine.resize();\r\n    }\r\n    componentDidMount() {\r\n        const {\r\n            init,\r\n            engineOptions,\r\n            adaptToDeviceRatio,\r\n        } = this.props;\r\n        const canvas = this.canvas.current!;\r\n        this.engine = new Engine(canvas, true, engineOptions, adaptToDeviceRatio);\r\n        this.scene = new Scene(this.engine);\r\n        init && init(this.engine, this.scene, canvas);\r\n        this.setCanvasSize();\r\n        window.addEventListener('resize', this.onResize);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.onResize);\r\n    }\r\n    render() {\r\n        const {\r\n            className,\r\n        } = this.props;\r\n        const {\r\n            width,\r\n            height,\r\n        } = this.state;\r\n        return <canvas\r\n            className={className}\r\n            width={width}\r\n            height={height}\r\n            ref={this.canvas}\r\n        />;\r\n    }\r\n}\r\n"],"sourceRoot":""}